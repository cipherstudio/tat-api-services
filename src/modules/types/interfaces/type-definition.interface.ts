export interface TypeProperty {
  type: string;
  isOptional: boolean;
  description?: string;
  enum?: string[];
  isArray?: boolean;
  arrayType?: string;
  defaultValue?: any;
  validations?: Record<string, any>;
  nestedProperties?: Record<string, TypeProperty>;
  isReadOnly?: boolean;
  isCreateOnly?: boolean;
  isUpdateOnly?: boolean;
  isAutoGenerated?: boolean;
}

export interface TypeDefinition {
  name: string;
  moduleName: string;
  category: 'dto' | 'entity' | 'interface';
  description?: string;
  properties: Record<string, TypeProperty>;
  imports?: string[];
  extends?: string[];
  decorators?: string[];
  filePath: string;
  primaryKey?: string;
  timestamps?: {
    createdAt?: string;
    updatedAt?: string;
    deletedAt?: string;
  };
  relations?: {
    [key: string]: {
      type: 'one-to-one' | 'one-to-many' | 'many-to-one' | 'many-to-many';
      target: string;
      inverseSide?: string;
    };
  };
}
